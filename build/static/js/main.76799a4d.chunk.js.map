{"version":3,"sources":["ReactSocketChat/Chat.jsx","App.js","reportWebVitals.js","index.js"],"names":["Chat","dummy","useRef","socketRef","useState","message","setMessage","name","setName","pname","setPName","chat","setChat","useEffect","current","io","connect","transports","on","console","log","scrollIntoView","behaviour","disconnect","Container","className","style","overflow","paddingTop","width","height","ListGroup","variant","map","index","display","ref","Form","onSubmit","e","emit","preventDefault","InputGroup","Control","placeholder","aria-describedby","onChange","target","value","Append","Button","type","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uSAKe,SAASA,IACtB,IAAMC,EAAQC,iBAAO,MACfC,EAAYD,mBAClB,EAA8BE,mBAAS,IAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAwBF,mBAAS,IAAjC,mBAAOG,EAAP,KAAaC,EAAb,KACA,EAA0BJ,mBAAS,IAAnC,mBAAOK,EAAP,KAAcC,EAAd,KACA,EAAwBN,mBAAS,IAAjC,mBAAOO,EAAP,KAAaC,EAAb,KAwBA,OAtBAC,qBAAU,WAOR,OANAV,EAAUW,QAAUC,IAAGC,QAAQ,6CAA6C,CAAEC,WAAY,CAAC,YAAa,UAAW,iBACnHd,EAAUW,QAAQI,GAAG,WAAU,YAAsB,IAApBb,EAAmB,EAAnBA,QAASE,EAAU,EAAVA,KACxCK,EAAQ,GAAD,mBAAKD,GAAL,CAAW,CAACN,UAAQE,WAC3BY,QAAQC,IAAIf,EAASE,MAEvBN,EAAMa,QAAQO,eAAe,CAACC,UAAW,WAClC,WACLnB,EAAUW,QAAQS,gBAEnB,CAACZ,IAaF,mCACE,eAACa,EAAA,EAAD,CAAWC,UAAU,wEAArB,UACE,cAACD,EAAA,EAAD,CAAWE,MAAO,CAACC,SAAU,OAAQC,WAAY,QAAjD,SACE,sBAAKF,MAAO,CAAEG,MAAO,OAAQC,OAAO,SAApC,UACE,cAACC,EAAA,EAAD,CAAWC,QAAQ,QAAnB,SACGrB,EAAKsB,KAAI,WAAoBC,GAApB,IAAG3B,EAAH,EAAGA,KAAMF,EAAT,EAASA,QAAT,OACR,gCACE,uBAAMqB,MAAO,CAACS,QAAS,UAAWV,UAAU,aAA5C,UAA0DpB,EAA1D,QACA,sBAAMqB,MAAO,CAACS,QAAS,UAAvB,SAAmC5B,MAF3B2B,QAMd,qBAAKE,IAAKnC,SAGd,cAACuB,EAAA,EAAD,CAAWC,UAAU,cAArB,SACGlB,EACD,cAAC8B,EAAA,EAAD,CAAMZ,UAAU,mBAAmBa,SA5B3C,SAAqBC,GACnB/B,EAAQC,GACRN,EAAUW,QAAQ0B,KAAK,UAAW,CAACnC,UAASE,SAC5CgC,EAAEE,iBACFnC,EAAW,KAwBL,SACE,eAACoC,EAAA,EAAD,WACE,cAACL,EAAA,EAAKM,QAAN,CACEC,YAAY,gBACZC,mBAAiB,eACjBC,SAAU,SAACP,GAAD,OACRjC,EAAWiC,EAAEQ,OAAOC,QAEtBA,MAAO3C,IAET,cAACqC,EAAA,EAAWO,OAAZ,UACE,cAACC,EAAA,EAAD,CAAQlB,QAAQ,oBAAoBmB,KAAK,SAAzC,yBAIN,cAACd,EAAA,EAAD,CAAMZ,UAAU,mBAAmBa,SArC3C,SAAoBC,GAClBA,EAAEE,iBACFjC,EAAQC,IAmCF,SACE,eAACiC,EAAA,EAAD,WACE,cAACL,EAAA,EAAKM,QAAN,CACEC,YAAY,aACZC,mBAAiB,eACjBC,SAAU,SAACP,GAAD,OACR7B,EAAS6B,EAAEQ,OAAOC,QAEpBA,MAAOvC,IAET,cAACiC,EAAA,EAAWO,OAAZ,UACE,cAACC,EAAA,EAAD,CAAQlB,QAAQ,oBAAoBmB,KAAK,SAAzC,oCClEDC,MARf,WAEE,OACE,8BACE,cAACpD,EAAD,OCGSqD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.76799a4d.chunk.js","sourcesContent":["import React,{useState, useRef, useEffect} from 'react'\r\nimport { Container, Form, Button, InputGroup, ListGroup} from \"react-bootstrap\";\r\nimport io from 'socket.io-client'\r\n\r\n\r\nexport default function Chat() {\r\n  const dummy = useRef(null);\r\n  const socketRef = useRef()\r\n  const [message, setMessage] = useState(\"\")\r\n  const [name, setName] = useState(\"\")\r\n  const [pname, setPName] = useState(\"\")\r\n  const [chat, setChat] = useState([])\r\n\r\n  useEffect(() => {\r\n    socketRef.current = io.connect('https://react-socket-server.herokuapp.com/',{ transports: ['websocket', 'polling', 'flashsocket'] })\r\n    socketRef.current.on('message',({message, name}) => {\r\n      setChat([...chat, {message,name}])\r\n      console.log(message, name)\r\n    })\r\n    dummy.current.scrollIntoView({behaviour: 'smooth'})\r\n    return () => {\r\n      socketRef.current.disconnect()\r\n    }\r\n  }, [chat]) \r\n\r\n  function sendMessage(e){\r\n    setName(pname)\r\n    socketRef.current.emit(\"message\", {message, name})\r\n    e.preventDefault()\r\n    setMessage(\"\")\r\n  }\r\n  function nameSubmit(e) {\r\n    e.preventDefault()\r\n    setName(pname)\r\n  }\r\n  return (\r\n    <>\r\n      <Container className=\"mt-5 flex-fill flex-column d-flex border border-light border-bottom-0\">\r\n        <Container style={{overflow: \"auto\", paddingTop: \"2rem\"}}>\r\n          <div style={{ width: 'fill', height:\"25rem\"}}>\r\n            <ListGroup variant=\"flush\">\r\n              {chat.map(({ name, message }, index) => (\r\n                <div key={index}>\r\n                  <span style={{display: \"inline\"}} className=\"text-muted\">{message}: </span>\r\n                  <span style={{display: \"inline\"}}>{name}</span>\r\n                </div>\r\n              ))}\r\n            </ListGroup>\r\n            <div ref={dummy}></div>\r\n          </div>\r\n        </Container>\r\n        <Container className=\"d-flex pt-2\">\r\n          {name ? \r\n          <Form className=\"mb-3 flex-grow-1\" onSubmit={sendMessage}>\r\n            <InputGroup >\r\n              <Form.Control\r\n                placeholder=\"Enter Message\"\r\n                aria-describedby=\"basic-addon2\"\r\n                onChange={(e) =>\r\n                  setMessage(e.target.value)\r\n                }\r\n                value={message}\r\n              />\r\n              <InputGroup.Append>\r\n                <Button variant=\"outline-secondary\" type=\"submit\">Send</Button>\r\n              </InputGroup.Append>\r\n            </InputGroup>\r\n          </Form> :\r\n          <Form className=\"mb-3 flex-grow-1\" onSubmit={nameSubmit}>\r\n            <InputGroup >\r\n              <Form.Control\r\n                placeholder=\"Enter Name\"\r\n                aria-describedby=\"basic-addon2\"\r\n                onChange={(e) =>\r\n                  setPName(e.target.value)\r\n                }\r\n                value={pname}\r\n              />\r\n              <InputGroup.Append>\r\n                <Button variant=\"outline-secondary\" type=\"submit\">Set Name</Button>\r\n              </InputGroup.Append>\r\n            </InputGroup>\r\n          </Form>}\r\n        </Container>\r\n      </Container>\r\n    </>\r\n  )\r\n}","import React from 'react'\nimport './App.css'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport Chat from './ReactSocketChat/Chat'\n\nfunction App() {\n\n  return (\n    <div>\n      <Chat/>\n    </div>\n  )\n}\nexport default App","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}